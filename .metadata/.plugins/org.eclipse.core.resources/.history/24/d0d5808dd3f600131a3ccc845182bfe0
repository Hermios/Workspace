package mamshops.admin.setters;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

import javax.servlet.UnavailableException;

import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.StringUtils;

import mamshops.requests.getter.ResourcesBundlesPage;
import mamshops.requests.keys.RequestParameterKeys;
import mamshops.requests.post.AbstractSetter;
import mamshops.requests.tools.UserMethodAccess;
import mamshops.tools.entries.PropertiesManager;

public class ResourceBundlesSetter extends AbstractSetter{
	private final static String PROPERTIES_EXTENSION=".properties";
	
	private File _file;
	private String _key;
	private String _value;
	
	public ResourceBundlesSetter() {
		super(UserMethodAccess.admin,null);
	}
	
	public String addNewString() throws Exception
	{
		setParameters();
		String keyCheckResult=checkKeyValidity(_key);
		if(keyCheckResult!=null)
			return keyCheckResult;
		BufferedWriter bw=null;
		try {
			bw=new BufferedWriter(new FileWriter(_file,true));
			bw.write(System.lineSeparator());
			bw.write(_key+"="+_value);
		} catch (IOException e) {
			e.printStackTrace();
		}
		finally
		{
			try {
				if(bw!=null)
					bw.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return "";
	}
	
	public void changeString() throws Exception
	{
		setParameters();
		BufferedWriter bw=null;
		BufferedReader br=null;
		try {
			br=new BufferedReader(new FileReader(_file));
			String readLine;
			List<String> stringsList=new ArrayList<>();
			while((readLine=br.readLine())!=null)
			{
				if(readLine.startsWith(_key))
					readLine=_key+"="+_value;
				stringsList.add(readLine);
			}			
			br.close();
			br=null;
			
			String finalString=StringUtils.join(stringsList, System.lineSeparator());
			bw=new BufferedWriter(new FileWriter(_file,false));
			bw.write(finalString);
		} catch (IOException e) {
			e.printStackTrace();
		}
		finally
		{
			try {
				if(br!=null)
					br.close();
				if(bw!=null)
					bw.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	private void setParameters() throws UnavailableException
	{
		String[] parameters=_request.getParameterValues(PropertiesManager.getProperty(RequestParameterKeys.ATTRIBUTE_PARAMETER_ID)+"[]");
		String fileName=parameters[0];
		String language=parameters[1];
		if(!language.equals("und"))
			fileName+="_"+language;
		fileName+=PROPERTIES_EXTENSION;
		_key=(parameters[0]+"."+parameters[2]).toLowerCase();		
		_value=StringEscapeUtils.escapeHtml(parameters[3]);
		_file=new File(PropertiesManager.getResourceBundlesPath(),fileName);
	}
	
	private String checkKeyValidity(String key) throws Exception
	{
		ResourcesBundlesPage rbp=new ResourcesBundlesPage();
		rbp.setRequest(_request);
		if(!rbp.get(key).equals(key))
			return "this key already exists";
		Pattern p=Pattern.compile("^[\\w\\.]+\\w$");
		if(!p.matcher(key).find())
			return "Only digits, underscore, letters and . are allowed. Key cannot finish with a dot";
		if(key.contains(".."))
			return "Two successive dots are not allowed";
		return null;
	}	
}

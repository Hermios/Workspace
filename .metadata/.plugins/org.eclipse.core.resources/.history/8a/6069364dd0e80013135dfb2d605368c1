package mamshops.businessmodels.database;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import mamshops.businessmodels.node.INodePropertyKey;
import mamshops.businessmodels.node.NodeLabel;
import mamshops.businessmodels.relationships.IRelationshipPropertyKey;
import mamshops.businessmodels.relationships.IMamsRelationshipType;
import mamshops.tools.entries.PropertiesManager;
import mamshops.tools.utils.GenericFunctions;

import org.neo4j.tooling.GlobalGraphOperations;
import org.neo4j.cypher.ExecutionEngine;
import org.neo4j.cypher.ExecutionResult;
import org.neo4j.cypher.SyntaxException;
import org.neo4j.graphdb.DynamicLabel;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.Label;
import org.neo4j.graphdb.Node;
import org.neo4j.graphdb.Relationship;
import org.neo4j.graphdb.RelationshipType;
import org.neo4j.graphdb.ResourceIterable;
import org.neo4j.graphdb.Transaction;
import org.neo4j.graphdb.factory.GraphDatabaseFactory;
import org.neo4j.kernel.impl.util.StringLogger;

import scala.Tuple2;
import scala.collection.Iterator;
import scala.collection.immutable.Map;

public class GraphDatabase{
	private final static String GRAPH_PATH="neo4j.graphdb.path";
	private final static String GRAPH_ARCHIVE_DIR="archive.graph.directory";
	private final static String GRAPH_ARCHIVE_PREFIX="archive.graph.prefix";
	private static final String EXCEPTION_STOP_SERVER="server.exception.interrupt";
	private final static String GRAPH_ARCHIV_ACTIV="graph.archivation.activ";
	
	private static GraphDatabase _instance;
	GraphDatabaseService _graph;
	ExecutionEngine _engine;
	
	private GraphDatabase()
	{				
		if(_graph!=null)
			return;
		File currentGraph=new File(PropertiesManager.getProperty(GRAPH_PATH));
		DateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");
		Calendar cal = Calendar.getInstance();		
		String copyGraphName=PropertiesManager.getProperty(GRAPH_ARCHIVE_PREFIX)+dateFormat.format(cal.getTime());
		
		//Archive current graph
		if(PropertiesManager.getProperty(GRAPH_ARCHIV_ACTIV).equals("true") && currentGraph.exists())
		{
			System.out.println("Archive current graph");
			try {
				GenericFunctions.copyFolder(currentGraph, new File(PropertiesManager.getProperty(GRAPH_ARCHIVE_DIR),copyGraphName));
			} catch (IOException e) {
				e.printStackTrace();
				if(PropertiesManager.getProperty(EXCEPTION_STOP_SERVER).equals("true"))
				{
					java.lang.System.exit(1); 
					return;
				}	
			}
		}	
		_graph=new GraphDatabaseFactory().newEmbeddedDatabase(PropertiesManager.getProperty(GRAPH_PATH));	
		_engine=new ExecutionEngine(_graph, StringLogger.SYSTEM_ERR);
	}
		
	private static GraphDatabase getInstance()
	{
		if(_instance==null)
			_instance=new GraphDatabase();
		return _instance;
	}	
		
	public static void connect()
	{
		getInstance();
	}
	
	public static void disconnect()
	{
		if(getInstance()._graph!=null)
		{
			getInstance()._graph.shutdown();
			getInstance()._graph=null;
		}
	}
	
	public static void clear() {
		if(_instance==null)
			return;
		disconnect();
		_instance=null;
	}
	
	private static RelationshipType getRelationshipType(final IMamsRelationshipType type)
	{
		RelationshipType result=new RelationshipType() {
			
			public String name() {
				return type.toString();
			}
		};
		return result;
	}
			
	public static void setNodeProperty(long _nodeId,INodePropertyKey id,Object value)	
	{
		if(value==null)
			return;
		try(Transaction tx=getInstance()._graph.beginTx())
		{				
			Node node=getInstance()._graph.getNodeById(_nodeId);
			if (node==null)
				return;
			node.setProperty(id.toString(), value);	
			tx.success();
		}
	}
	
	public static Object getNodeProperty(long nodeId,INodePropertyKey id)
	{
		Object result=null;
		try(Transaction tx=getInstance()._graph.beginTx())
		{
			Node node=getInstance()._graph.getNodeById(nodeId);
			if (node==null || !node.hasProperty(id.toString()))
				return null;		
			result=node.getProperty(id.toString());
			tx.success();
		}
		return result;
	}
	
	public static void removeNodeProperty(long nodeId,INodePropertyKey id)
	{
		try(Transaction tx=getInstance()._graph.beginTx())
		{
			Node node=getInstance()._graph.getNodeById(nodeId);
			if (node==null || !node.hasProperty(id.toString()))
				return;		
			node.removeProperty(id.toString());
			tx.success();
		}
	}
	
	public static Long createNode(NodeLabel labelName)
	{
		Long result=null;
		try(Transaction tx=getInstance()._graph.beginTx())
		{
			Label label=DynamicLabel.label(labelName.toString());
			result=getInstance()._graph.createNode(label).getId();
			tx.success();
		}
		return result;
	}
	
	public static List<Long> findNodesByLabelAndProperty(NodeLabel labelName,INodePropertyKey id,Object value)
	{
		List<Long> result=new ArrayList<Long>();
		try(Transaction tx=getInstance()._graph.beginTx())
		{
			Label label=DynamicLabel.label(labelName.toString());		
			ResourceIterable<Node> allNodes= getInstance()._graph.findNodesByLabelAndProperty(label, id.toString(), value);			
			for(Node currentNode:allNodes)
				result.add(currentNode.getId());
			tx.success();
		}
		return result;
	}

	public static String getNodeLabel(long nodeId)
	{
		Label label=null;
		try(Transaction tx=getInstance()._graph.beginTx())
		{
			label=getInstance()._graph.getNodeById(nodeId).getLabels().iterator().next();
			tx.success();
		}
		return label.toString();
	}

	public static Long getOtherNode(long nodeId,long relationShipId)
	{
		Long result=null;
		try(Transaction tx=getInstance()._graph.beginTx())
		{
			Node node=getInstance()._graph.getNodeById(nodeId);
			Relationship rs=getInstance()._graph.getRelationshipById(relationShipId);
			result=rs.getOtherNode(node).getId();
			tx.success();
		}
		return result;
	}
		
	public static Long createRelationshipTo(long nodeId,long targetId,mamshops.businessmodels.relationships.IMamsRelationshipType relationShipType)
	{
		Long result=null;
		try(Transaction tx=getInstance()._graph.beginTx())
		{
			Node node=getInstance()._graph.getNodeById(nodeId);
			Node targetNode=getInstance()._graph.getNodeById(targetId);
			result=node.createRelationshipTo(targetNode, getRelationshipType(relationShipType)).getId();
			tx.success();
		}
		return result;
	}	
	
	public static List<Long> getRelationshipsFromNode(long nodeId,mamshops.businessmodels.relationships.IMamsRelationshipType relationShipType)
	{
		List<Long> result=new ArrayList<Long>();
		try(Transaction tx=getInstance()._graph.beginTx())
		{
			Node node=getInstance()._graph.getNodeById(nodeId);
			Iterable<Relationship> iterableRelationships=node.getRelationships(getRelationshipType(relationShipType));
			for(Relationship rs:iterableRelationships)
				result.add(rs.getId());
			tx.success();
		}
		return result;
	}
	
	public static void setRelationshipProperty(long rsId,IRelationshipPropertyKey id,Object value)	
	{
		try(Transaction tx=getInstance()._graph.beginTx())
		{
			getInstance()._graph.getRelationshipById(rsId).setProperty(id.toString(), value);
			tx.success();
		}
	}
	
	public static Object getRelationshipProperty(long rsId,IRelationshipPropertyKey id)
	{
		Object result=null;
		try(Transaction tx=getInstance()._graph.beginTx())
		{
			result=getInstance()._graph.getRelationshipById(rsId).getProperty(id.toString());		
			tx.success();
		}
		return result;
	}
	
	public static Long getRelationshipNode(long rsId,boolean startRelationship)
	{
		Long result=null;
		try(Transaction tx=getInstance()._graph.beginTx())
		{
			Relationship rs=getInstance()._graph.getRelationshipById(rsId);
			result=startRelationship?rs.getStartNode().getId():rs.getEndNode().getId();
			tx.success();
		}
		return result;
	}
	
	public static String getRelationshipType(long rsId)
	{
		String name=null;
		try(Transaction tx=getInstance()._graph.beginTx())
		{
			name=getInstance()._graph.getRelationshipById(rsId).getType().name();
			tx.success();
		}
		return name;
	}
		
	public static List<Long> getNodes(NodeLabel nodeLabel)
	{
		List<Long> result=new ArrayList<>();	
		try(Transaction tx=getInstance()._graph.beginTx())
		{
			Label label=DynamicLabel.label(nodeLabel.toString());			
			for(Node currentNode:GlobalGraphOperations.at(getInstance()._graph).getAllNodesWithLabel(label))
				result.add(currentNode.getId());
			tx.success();
		}
		return result;
	}
	
	public static String sendCommand(String command)
	{
		
		ExecutionResult result;
		StringBuffer sb=new StringBuffer();
		try ( Transaction tx=getInstance()._graph.beginTx())
		{
			try
			{
		    result = getInstance()._engine.execute( command );			
		    Iterator<Map<String, Object>> mapsIterator=result.toList().iterator();
		    while(mapsIterator.hasNext())
		    {
		    	Iterator<Tuple2<String, Object>> iteratorMap=mapsIterator.next().toIterator();
		    	while(iteratorMap.hasNext())
		    	{
		    		Tuple2<String,Object> tuple=iteratorMap.next();
		    		sb.append(tuple._1+":"+tuple._2+";");
		    	}
	    		sb.append(System.getProperty("line.separator"));
		    }
			}
			catch(SyntaxException se)
			{
				sb.append(se.getLocalizedMessage());
			}
		}
		return sb.toString();		
	}
	
	public static void removeRelationShip(long relationShipId)
	{
		try(Transaction tx=getInstance()._graph.beginTx())
		{
			getInstance()._graph.getRelationshipById(relationShipId).delete();
			tx.success();
		}
	}
}

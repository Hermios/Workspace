package mamshops.user.getters;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;

import mamshops.businessmodels.database.MamsNode;
import mamshops.businessmodels.database.MamsRelationship;
import mamshops.businessmodels.propertykeys.node.NodeLabel;
import mamshops.businessmodels.propertykeys.node.UserPropertyKey;
import mamshops.businessmodels.relationships.types.ShopRelationshipType;
import mamshops.businessmodels.relationships.types.UserRelationshipType;
import mamshops.businessmodels.tools.UserMethodAccess;
import mamshops.main.getters.CountryGetter;
import mamshops.main.getters.TownGetter;
import mamshops.tools.annotations.HelperAnnotation;
import mamshops.tools.entries.PropertiesManager;
import mamshops.tools.utils.GenericFunctions;

public class UserGetter extends BasicUserGetter{
	
	public UserGetter()
	{
		super(UserMethodAccess.user);
	}
						
	@HelperAnnotation(description="return the current country where the user lives")
	public List<CountryGetter> getDeliveringCountries()
	{
		return getRelatedNodes(CountryGetter.class,UserRelationshipType.deliveringcountry);
	}

	public boolean isNewDeliveringCountryAddeable()
	{
		return getDeliveringCountries().size()<Integer.parseInt(PropertiesManager.getProperty("user.max.deliveringcountries"));
	}
	
	@HelperAnnotation(description="return true if the user choose a public status")
	public String getStatus()
	{
		return getAttribute(UserPropertyKey.status,true);
	}
	
	@HelperAnnotation(description="return the city where the user lives")
	public TownGetter getTown()
	{
		return getRelatedNode(TownGetter.class,UserRelationshipType.town);
	}
			
	@HelperAnnotation(description="return a list of shops for the current user")
	public List<UserShopGetter> getUserShops(boolean validated,Integer count,boolean random)
	{
		List<UserShopGetter> listUserShops=getRelatedNodes(UserShopGetter.class,UserRelationshipType.usershop);
		listUserShops= GenericFunctions.getEditedList(listUserShops, count, random);
		List<UserShopGetter> result=new ArrayList<>();
		for(UserShopGetter userShopGetter:listUserShops)
		{
			if(userShopGetter.isValidated()==validated)
				result.add(userShopGetter);
		}
		return result;
	}
		
	public List<FollowerGetter> getFollowing(boolean followers,Integer count, boolean random)
	{
		List<FollowerGetter> result=new ArrayList<>();
		for(MamsRelationship relationship:_currentNode.getRelationships(UserRelationshipType.followers, followers, !followers))
			result.add(construct(FollowerGetter.class, relationship.getOtherNode(getId())));
		return GenericFunctions.getEditedList(result, count, random);
	}
	
	public UserShopGetter getUserShop(Long shop)
	{
		UserShopGetter result=null;
		List<MamsNode> listNodes=_currentNode.getNodes(new MamsNode(shop), 2,false,UserRelationshipType.usershop,ShopRelationshipType.usershop);
		
		if(listNodes.size()>3)
			return null;
		Iterator<MamsNode> iterNodes=listNodes.iterator();
		while(result==null && iterNodes.hasNext())
		{
			MamsNode endNode=iterNodes.next();
			if(endNode.getLabel().equals(NodeLabel.usershop))
				result=construct(UserShopGetter.class,endNode);
		}
		return result;
	}
	
	public FriendGetter getFriend(Long friendId)
	{
		MamsNode friendNode=new MamsNode(friendId);
		if(_currentNode.getRelationships(friendNode, UserRelationshipType.friend).isEmpty())
			return null;
		return construct(FriendGetter.class,friendNode);
	}
	
	public List<TimeEventGetter> getSortedAllTimeEvents(boolean userOnly)
	{
		List<TimeEventGetter> result=new ArrayList<>();
		List<String> listCacheIds=new ArrayList<>();
		String[] cacheIdsArray=(String[])_currentNode.getProperty(UserPropertyKey.cachetimeline);
		if(cacheIdsArray!=null)
		{
			for(String currentCacheId:(String[])_currentNode.getProperty(UserPropertyKey.cachetimeline))
			{
				Long longId=Long.parseLong(currentCacheId);
				TimeEventGetter teg=construct(TimeEventGetter.class,new MamsNode(longId));
				if(teg.exists())
				{
					listCacheIds.add(currentCacheId);
					result.add(teg);
				}
			}
		}
		String[] cacheIdsDoublons=(String[])_currentNode.getProperty(UserPropertyKey.cachetimelinedoublons);				
		List<String> listDoublons=(cacheIdsDoublons==null?new ArrayList<String>():Arrays.asList(cacheIdsDoublons));
		List<TimeEventGetter> listUnsortedTimeEvents=new ArrayList<>();
		
		//Load the list of timeevents for the user
		listUnsortedTimeEvents.addAll(getTimeEvents());
		
		//Load the list of timeevents for all friends
		if(!userOnly)
		{
			for(FriendGetter friendGetter:getFriends(null,false))
				listUnsortedTimeEvents.addAll(friendGetter.getTimeEvents());
			for(FollowerGetter followerGetter:getFollowing(false, null, false))
				listUnsortedTimeEvents.addAll(followerGetter.getTimeEvents());
		}
		
		//Loop on all events
		for(TimeEventGetter currentTimeEventGetter:listUnsortedTimeEvents)
		{			
			String currentId=currentTimeEventGetter.getId().toString();
				
			//add result in sorted list, only if it doesn't belong to list of doublons. If doublon, Priority on the one of the current user
			Long doublon=currentTimeEventGetter.getDoublon();
			if(!addToList(currentTimeEventGetter, listDoublons, doublon,listCacheIds))
				continue;
			Calendar currentTimeCalendar=currentTimeEventGetter.getCalendar();
			int i=0;
			while(i<result.size() && currentTimeCalendar.before(result.get(i).getCalendar()))
				i++;
			result.add(i,currentTimeEventGetter);
			listCacheIds.add(currentId);
			if(doublon!=null)
				listDoublons.add(doublon.toString());
		}
		_currentNode.setProperty(UserPropertyKey.cachetimeline, listCacheIds.toArray(new String[listCacheIds.size()]));
		_currentNode.setProperty(UserPropertyKey.cachetimelinedoublons, listDoublons.toArray(new String[listDoublons.size()]));
		return result;
	}
	
	private boolean addToList(TimeEventGetter timeEvent,List<String> listDoublons,Long doublon,List<String> listCacheIds)
	{
		String currentId=timeEvent.getId().toString();
		if(listCacheIds.contains(currentId) || listDoublons.contains(currentId))
		{
			System.out.println("cache found");
			return false;
		}
			
		
		if(timeEvent.isToCurrentUser() || doublon==null)
			return true;
		TimeEventGetter doublonTimeEvent=construct(TimeEventGetter.class,new MamsNode(doublon));
		return !doublonTimeEvent.isToCurrentUser();
	}
	
	@HelperAnnotation(description="return true if the current user chose to keep the last visited page")
	public boolean isSelectedPageKept()
	{
		return (boolean)_currentNode.getProperty(UserPropertyKey.keepVisitedFrame);
	}	
}
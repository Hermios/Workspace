package nikoBlex.servlet;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.RandomStringUtils;

import nikoBlex.requests.authorizationlevels.AuthorizationLevelGenericFunctions;
import nikoBlex.requests.get.GetDataHelper;
import nikoBlex.requests.keys.RequestParameterKeys;
import nikoBlex.requests.post.ActionHelper;
import nikoBlex.requests.tools.DynamicScriptHelper;
import nikoBlex.requests.tools.RequestGenericTools;
import nikoBlex.resources.dynamicimages.DynamicImageManager;
import nikoBlex.resources.enums.EnumResourceSource;
import nikoBlex.resources.pages.DynamicPageHelper;
import nikoBlex.resources.tools.ResourceTools;
import nikoBlex.resources.tools.ResourcesParameterKeys;
import nikoBlex.tools.entries.EnumPropertieKeys;
import nikoBlex.tools.entries.PropertiesManager;
import nikoBlex.tools.utils.GenericFunctions;
import nikoBlex.tools.utils.PathConstructor;

public class ServletFilter extends HttpServlet{	
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException
	{			
		request.setAttribute(RequestParameterKeys.response.toString(), response);
		String localCode=request.getParameter("isLocal");
		boolean isLocalRequest=localCode!=null && localCode.equals("sie46WE7Pakz5FywxdUR");
		if(request.getParameter(RequestParameterKeys.doPost.toString())!=null)
		{
			doPost(request, response);
			try
			{
				response.sendRedirect(request.getServletContext().getContextPath());
			}
			catch(IllegalStateException ise){ise.printStackTrace();}
			return;
		}
		if(request.getParameter(RequestParameterKeys.isMethod.toString())!=null)
		{
			setParamsInSession(request);
			try {
				GetDataHelper.doGet(request, response, AuthorizationLevelGenericFunctions.getUserAuthorizationValue(request.getSession()).getAuthorizationLevel());
			} catch (InstantiationException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
			return;
		}
		String contentType=ResourceTools.getContentType(request.getRequestURI());
		int userAuthorizationLevel=AuthorizationLevelGenericFunctions.getUserAuthorizationValue(request.getSession()).getAuthorizationLevel();
		if(contentType==null)
			contentType="text/html";
		response.setContentType(contentType);
		if(contentType.equals("text/html") && isLocalRequest)
		{
			setParamsInSession(request);
			DynamicPageHelper.doGet(request, response);
			return;
		}		
		if(contentType.equals("text/javascript") && request.getParameter(PropertiesManager.getString(EnumPropertieKeys.DYNAMICSCRIPT_PARAM_KEY))!=null)
		{
			DynamicScriptHelper.doGet(request, response,userAuthorizationLevel);
			return;
		}
		String path="";
		EnumResourceSource currentPS=EnumResourceSource.StaticImage;
		try
		{
			currentPS=EnumResourceSource.valueOf(request.getParameter(ResourcesParameterKeys.getResourceSourceKey()));
		}
		catch(IllegalArgumentException |NullPointerException npe){}
		switch(currentPS)
		{
			case Temp:
				path=PropertiesManager.getString(EnumPropertieKeys.TEMP_DIRECTORY);
				break;
			case DynamicImage:
				path=DynamicImageManager.getDynamicImagesRoot();
				break;
			default:
				path=PathConstructor.getPath(PropertiesManager.getString(EnumPropertieKeys.WEBCONTENT_ROOT),ResourceTools.getStaticResourceRoot(request.getRequestURI()));
				break;
		}
			
		String fileName=RequestGenericTools.getTarget(request);	
		path=PathConstructor.getPath(path,fileName);
		if(!isLocalRequest)
			path=downloadExternalData(request,contentType);
		RequestGenericTools.writeDataInResponse(path, response);
	}		
	
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		try {
			setParamsInSession(request);
			ActionHelper.doPost(request, response,IUserAuthorizationLevel.(request.getSession()));
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		}
	}
	
	private static void setParamsInSession(HttpServletRequest request)
	{		
		if(!request.getParameterNames().hasMoreElements())
			return;
		List<String> authorizedAttrs=PropertiesManager.getList(EnumPropertieKeys.SESSION_AUTHORIZED_ATTRIBUTES,";");
		HttpSession session=request.getSession();		
		for(String authAttr:authorizedAttrs)
			session.setAttribute(authAttr, request.getParameter(authAttr));
		
	}
	
	private static String downloadExternalData(HttpServletRequest request,String contentType) throws MalformedURLException, IOException
	{
		String root=findCurrentRoot(request);
		if (root==null)
			return null;
		File tempFile=new File(PropertiesManager.getString(EnumPropertieKeys.TEMP_DIRECTORY),RandomStringUtils.randomAlphanumeric(25)+".tmp");
		String urlLastPart=request.getRequestURL().toString();
		urlLastPart=urlLastPart.substring(urlLastPart.lastIndexOf("/"),urlLastPart.length());
		URL url=new URL(PathConstructor.getURL(root,urlLastPart));
		if(!contentType.startsWith("image"))
		{
			HttpURLConnection huc=null;
			try {
			HttpURLConnection.setFollowRedirects(true);			
			huc = (HttpURLConnection) url.openConnection();
			huc.setUseCaches(false);
			huc.setAllowUserInteraction(false);
			String result=huc.getResponseMessage();
			huc.disconnect();
			BufferedWriter bw=new BufferedWriter(new FileWriter(tempFile));
			bw.write(result.replace("http://", "/root/"));
			bw.close();
			} catch (IOException ioe) {
				ioe.printStackTrace();
				if(huc!=null)
					huc.disconnect();
				return "";
			}
		}
		else
			FileUtils.copyURLToFile(url, tempFile);		
		return tempFile.getAbsolutePath();
	}
	
	private static String findCurrentRoot(HttpServletRequest request)
	{
		String result=null;
		HttpSession session=request.getSession();
		String[] listRoots=(String[])session.getAttribute("listRootsExternalWebSite");
		if(listRoots==null || request.getParameter("resetRootsList")!=null)
			listRoots=new String[0];
		int i=listRoots.length;
		String uri=request.getRequestURI();
		String[] newList=null;
		if(!uri.startsWith("/root/"))
		{
			boolean rootFound=false;
			while(!rootFound && i>0)
			{
				i--;
				rootFound=GenericFunctions.websiteExists(PathConstructor.getURL("http://",listRoots[i],request.getRequestURL().toString()));
			}
			if(!rootFound)
				return null;
			
			result=listRoots[i];
			newList=new String[i+1];
			for(int j=0;j<=i;j++)
				newList[j]=listRoots[j];
		}
		else
		{
			uri=uri.replaceFirst("/root/","");
			result=uri.substring(uri.lastIndexOf("/"),uri.length());
			newList=new String[i+1];
			for(int j=0;j<i;j++)
				newList[j]=listRoots[j];
			newList[i]=result;
		}
		session.setAttribute("listRootsExternalWebSite",newList);
		return result;
	}

	
}
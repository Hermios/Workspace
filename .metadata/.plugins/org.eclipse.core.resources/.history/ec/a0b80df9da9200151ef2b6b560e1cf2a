package nikoBlex.servlet;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import nikoBlex.requests.authorizationlevels.AuthorizationLevelGenericFunctions;
import nikoBlex.requests.get.GetDataHelper;
import nikoBlex.requests.keys.RequestParameterKeys;
import nikoBlex.requests.post.ActionHelper;
import nikoBlex.requests.tools.DynamicScriptHelper;
import nikoBlex.resources.pages.DynamicPageHelper;
import nikoBlex.resources.tools.ResourceTools;
import nikoBlex.tools.entries.EnumPropertieKeys;
import nikoBlex.tools.entries.PropertiesManager;
import nikoBlex.tools.utils.GenericFunctions;
import nikoBlex.tools.utils.PathConstructor;

public abstract class ServletFilter extends HttpServlet{	
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException
	{			
		request.setAttribute(RequestParameterKeys.response.toString(), response);
		String localCode=request.getParameter("isLocal");
		boolean isLocalRequest=localCode!=null && localCode.equals("sie46WE7Pakz5FywxdUR");
		if(request.getParameter(RequestParameterKeys.doPost.toString())!=null)
		{
			doPost(request, response);
			try
			{
				response.sendRedirect(request.getServletContext().getContextPath());
			}
			catch(IllegalStateException ise){ise.printStackTrace();}
			return;
		}
		if(request.getParameter(RequestParameterKeys.isMethod.toString())!=null)
		{
			setParamsInSession(request);
			try {
				GetDataHelper.doGet(request, response, AuthorizationLevelGenericFunctions.getUserAuthorization(request.getSession()).getAuthorizationLevel());
			} catch (InstantiationException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
			return;
		}
		String contentType=ResourceTools.getContentType(request.getRequestURI());
		int userAuthorizationLevel=AuthorizationLevelGenericFunctions.getUserAuthorization(request.getSession()).getAuthorizationLevel();
		if(contentType==null)
			contentType="text/html";
		response.setContentType(contentType);
		if(contentType.equals("text/html") && isLocalRequest)
		{
			setParamsInSession(request);
			DynamicPageHelper.doGet(request, response);
			return;
		}		
		if(contentType.equals("text/javascript") && request.getParameter(PropertiesManager.getString(EnumPropertieKeys.DYNAMICSCRIPT_PARAM_KEY))!=null)
		{
			DynamicScriptHelper.doGet(request, response,userAuthorizationLevel);
			return;
		}
		
		setStaticImage();
	}		
	
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		try {
			setParamsInSession(request);
			ActionHelper.doPost(request, response,AuthorizationLevelGenericFunctions.getUserAuthorization(request.getSession()).getAuthorizationLevel());
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		}
	}
	
	private static void setParamsInSession(HttpServletRequest request)
	{		
		if(!request.getParameterNames().hasMoreElements())
			return;
		List<String> authorizedAttrs=PropertiesManager.getList(EnumPropertieKeys.SESSION_AUTHORIZED_ATTRIBUTES,";");
		HttpSession session=request.getSession();		
		for(String authAttr:authorizedAttrs)
			session.setAttribute(authAttr, request.getParameter(authAttr));
		
	}
	
	
	
	
	protected abstract void setStaticImage();
	
}
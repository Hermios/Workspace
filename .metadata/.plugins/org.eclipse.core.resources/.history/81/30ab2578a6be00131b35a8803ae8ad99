package mamshops.httpRequests.webcontent;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import mamshops.libs.entries.PropertiesManager;
import mamshops.libs.httpRequests.AbstractHttpRequest;
import mamshops.libs.serviceLocators.ServiceLocator;
import mamshops.libs.servletContexts.ServletContextPropertyKeys;
import mamshops.libs.utils.PathConstructor;
import mamshops.libs.velocity.VelocityManager;

public class HtmlPageHttpRequest extends AbstractHttpRequest{
	
	private final static String ERROR_404_PAGE_NAME="template.404.notfound.name";
	private final static String DEFAULT_TEMPLATE="webpage.template.default.name";	
	
	protected static String ROOT_ID="template.parent.directory.webpages";	
	
	public HtmlPageHttpRequest() {
		super(ROOT_ID);
		// TODO Auto-generated constructor stub
	}

	@Override
	public void doGet(HttpServletRequest request, HttpServletResponse response,String uri) throws IOException {
		ServiceLocator sl=(ServiceLocator)request.getServletContext().getAttribute(ServletContextPropertyKeys.SERVICE_LOCATOR);
		VelocityManager vm=sl.getService(VelocityManager.class);		 		 				 
		PrintWriter pw=response.getWriter();		
		try
		{
			vm.generateHtml(uri,request, pw);
		}
		catch(Exception rnfe)
		{
			if(!uri.endsWith(PropertiesManager.getProperty(ERROR_404_PAGE_NAME)))
			{
		 		String paths[]=new String[]
						{
								"",
								PropertiesManager.getProperty(ROOT_ID),
								PropertiesManager.getProperty(ERROR_404_PAGE_NAME)
						};
		 		try
		 		{
				vm.generateHtml(PathConstructor.getURL(paths), request, pw);
		 		}
		 		catch(Exception e){}
			}
							
		}
		pw.println();
	}
	
	@Override
	public String getURL(String fileName)
	{				
		String[] paths=new String[]{
				_root,
				fileName
		};
		return PathConstructor.getURL(paths);		
	}	
	
	public static String getDefault()
	{
		String paths[]=new String[]
		{
				PropertiesManager.getProperty(ROOT_ID),
				PropertiesManager.getProperty(DEFAULT_TEMPLATE)
		};		
		return PathConstructor.getURL(paths);		
	}		
}

package nikoBlex.requests.getset;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import nikoBlex.requests.getset.AbstractNodeGetSet;
import nikoBlex.requests.getset.AbstractNodeSetter;
import nikoBlex.requests.keys.SessionAttributeKeys;
import nikoBlex.usecases.user.IUserAuthorizationLevel;
import nikoBlex.businessmodels.database.GraphNode;
import nikoBlex.businessmodels.database.GraphRelationship;
import nikoBlex.businessmodels.enums.INodePropertyKey;
import nikoBlex.businessmodels.relationships.types.IGraphRelationshipType;

public abstract class AbstractNodeSetter<NodeLabel extends Enum<NodeLabel>> extends AbstractSetter{	
	protected GraphNode _currentNode;	
	private INodePropertyKey _refKey;
	private NodeLabel _nodeLabel;	
	
	protected AbstractNodeSetter(IUserAuthorizationLevel methodAccess,
			NodeLabel nodeLabel, INodePropertyKey refKey,
			SessionAttributeKeys sessionAttributeKey) {
		super(methodAccess, sessionAttributeKey);
		_nodeLabel=nodeLabel;
		_refKey=refKey;
	}
	
	public static <NodeLabel extends Enum<NodeLabel>,T extends AbstractNodeSetter<NodeLabel>> T SetterFactory(GraphNode node,Class<T> setter) throws InstantiationException, IllegalAccessException
	{
		T instance=setter.newInstance();
		instance._currentNode=node;
		return instance;
	}
		
	protected String setAttribute(INodePropertyKey id)
	{
		if(_currentNode!=null)
			_currentNode.setProperty(id, _parameter);		
		return _currentNode.getProperty(id).equals(_parameter)?"":"error.attribute.changed";
	}

	protected String addRelation(IGraphRelationshipType relType)
	{
		Long targetId=Long.parseLong(_parameter);		
		_currentNode.createRelationship(targetId, relType);
		return _currentNode.getRelationships(new GraphNode(targetId), relType)!=null?"":"error.relation.added";
	}
	
	protected String replaceRelation(IGraphRelationshipType relType)
	{
		List<GraphRelationship> listRels=_currentNode.getRelationships(relType, true, true);
		if(!listRels.isEmpty())			
			listRels.get(0).remove();
		return addRelation(relType).isEmpty() && _currentNode.getRelationships(relType, true, true).size()==1?"":"error.relation.changed";
		
	}
	
	protected String deleteRelation(IGraphRelationshipType relType)
	{
		Long targetId=Long.parseLong(_parameter);
		GraphNode targetNode=new GraphNode(targetId);
		_currentNode.getRelationships(targetNode, relType).get(0).remove();
		return _currentNode.getRelationships(targetNode, relType)==null?"":"error.relation.deleted";
	}

	public boolean equals(AbstractNodeSetter<NodeLabel> setter)
	{
		return setter.getId()==getId();
	}

}

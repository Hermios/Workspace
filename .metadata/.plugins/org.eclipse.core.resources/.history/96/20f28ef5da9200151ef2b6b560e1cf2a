package nikoBlex.usecases.dynamicimages;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.RandomStringUtils;

import nikoBlex.requests.tools.RequestGenericTools;
import nikoBlex.resources.enums.EnumResourceSource;
import nikoBlex.resources.tools.ResourceTools;
import nikoBlex.resources.tools.ResourcesParameterKeys;
import nikoBlex.tools.entries.EnumPropertieKeys;
import nikoBlex.tools.entries.PropertiesManager;
import nikoBlex.tools.utils.PathConstructor;

public class ServletFilterCallStaticImage {
	static void CallStaticImage()
	{

		String path="";
		
		EnumResourceSource currentPS=EnumResourceSource.StaticImage;
		try
		{
			currentPS=EnumResourceSource.valueOf(request.getParameter(ResourcesParameterKeys.getResourceSourceKey()));
		}
		catch(IllegalArgumentException |NullPointerException npe){}
		switch(currentPS)
		{
			case Temp:
				path=PropertiesManager.getString(EnumPropertieKeys.TEMP_DIRECTORY);
				break;
			case DynamicImage:
				path=DynamicImageManager.getDynamicImagesRoot();
				break;
			default:
				path=PathConstructor.getPath(PropertiesManager.getString(EnumPropertieKeys.WEBCONTENT_ROOT),ResourceTools.getStaticResourceRoot(request.getRequestURI()));
				break;
		}
			
		
		String fileName=RequestGenericTools.getTarget(request);	
		path=PathConstructor.getPath(path,fileName);
		if(!isLocalRequest)
			path=downloadExternalData(request,contentType);
		RequestGenericTools.writeDataInResponse(path, response);
	}
	
	private static String downloadExternalData(HttpServletRequest request,String contentType) throws MalformedURLException, IOException
	{
		String root=findCurrentRoot(request);
		if (root==null)
			return null;
		File tempFile=new File(PropertiesManager.getString(EnumPropertieKeys.TEMP_DIRECTORY),RandomStringUtils.randomAlphanumeric(25)+".tmp");
		String urlLastPart=request.getRequestURL().toString();
		urlLastPart=urlLastPart.substring(urlLastPart.lastIndexOf("/"),urlLastPart.length());
		URL url=new URL(PathConstructor.getURL(root,urlLastPart));
		if(!contentType.startsWith("image"))
		{
			HttpURLConnection huc=null;
			try {
			HttpURLConnection.setFollowRedirects(true);			
			huc = (HttpURLConnection) url.openConnection();
			huc.setUseCaches(false);
			huc.setAllowUserInteraction(false);
			String result=huc.getResponseMessage();
			huc.disconnect();
			BufferedWriter bw=new BufferedWriter(new FileWriter(tempFile));
			bw.write(result.replace("http://", "/root/"));
			bw.close();
			} catch (IOException ioe) {
				ioe.printStackTrace();
				if(huc!=null)
					huc.disconnect();
				return "";
			}
		}
		else
			FileUtils.copyURLToFile(url, tempFile);		
		return tempFile.getAbsolutePath();
	}
}

package mamshops.user.getters;

import java.util.ArrayList;
import java.util.List;

import mamshops.businessmodels.database.MamsNode;
import mamshops.businessmodels.database.MamsRelationship;
import mamshops.businessmodels.propertykeys.node.UserPropertyKey;
import mamshops.businessmodels.propertykeys.relationships.FriendshipPropertyKey;
import mamshops.businessmodels.relationships.types.UserRelationshipType;
import mamshops.businessmodels.tools.UserMethodAccess;
import mamshops.main.getters.CountryGetter;
import mamshops.main.getters.TownGetter;
import mamshops.tools.annotations.HelperAnnotation;
import mamshops.tools.entries.PropertiesManager;
import mamshops.tools.utils.GenericFunctions;

public class UserGetter extends BasicUserGetter{
	
	public UserGetter()
	{
		super(UserMethodAccess.user);
	}
					
	@HelperAnnotation(description="return the first name of the user")
	public String getFirstName()
	{
		return getAttribute(UserPropertyKey.firstname,false);
	}
	
	@HelperAnnotation(description="return the nationality of the user")
	public CountryGetter getNationality()
	{
		return getRelatedNode(CountryGetter.class, UserRelationshipType.nationality);		
	}
	
	@HelperAnnotation(description="return the current country where the user lives")
	public CountryGetter getCountry()
	{
		return getRelatedNode(CountryGetter.class, UserRelationshipType.country);
	}
		
	@HelperAnnotation(description="return the current country where the user lives")
	public List<CountryGetter> getDeliveringCountries()
	{
		return getRelatedNodes(CountryGetter.class,UserRelationshipType.deliveringcountry);
	}

	public boolean isNewDeliveringCountryAddeable()
	{
		return getDeliveringCountries().size()<Integer.parseInt(PropertiesManager.getProperty("user.max.deliveringcountries"));
	}
	
	@HelperAnnotation(description="return true if the user choose a public status")
	public String getStatus()
	{
		return getAttribute(UserPropertyKey.status,true);
	}
	
	@HelperAnnotation(description="return the city where the user lives")
	public TownGetter getTown()
	{
		return getRelatedNode(TownGetter.class,UserRelationshipType.town);
	}
			
	@HelperAnnotation(description="return a list of friends for the current user")
	public List<FriendGetter> getFriends(Integer count,boolean random)
	{
		return getRelatedNodes(FriendGetter.class,UserRelationshipType.friend);
	}

	@HelperAnnotation(description="return a list of shops for the current user")
	public List<UserShopGetter> getUserShops(boolean validated,Integer count,boolean random)
	{
		List<UserShopGetter> listUserShops=getRelatedNodes(UserShopGetter.class,UserRelationshipType.usershop);
		listUserShops= GenericFunctions.getEditedList(listUserShops, count, random);
		List<UserShopGetter> result=new ArrayList<>();
		for(UserShopGetter userShopGetter:listUserShops)
		{
			if(userShopGetter.isValidated()==validated)
				result.add(userShopGetter);
		}
		return result;
	}
		
	public boolean hasFriend(MamsNode friendNode)
	{
		MamsRelationship relationship= _currentNode.getRelationship(UserRelationshipType.friend, friendNode);
		return relationship!=null && relationship.getProperty(FriendshipPropertyKey.validate)!=null;
	}
	
	@HelperAnnotation(description="return true if the current user chose to keep the last visited page")
	public boolean isSelectedPageKept()
	{
		return (boolean)_currentNode.getProperty(UserPropertyKey.keepVisitedFrame);
	}	
}
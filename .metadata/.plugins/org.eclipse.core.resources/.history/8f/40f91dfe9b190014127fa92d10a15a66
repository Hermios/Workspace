package mamshops.user.getters;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import mamshops.businessmodels.database.MamsNode;
import mamshops.businessmodels.propertykeys.node.NodeLabel;
import mamshops.businessmodels.propertykeys.node.UserShopPropertyKey;
import mamshops.businessmodels.relationships.types.ShopRelationshipType;
import mamshops.businessmodels.relationships.types.UserRelationshipType;
import mamshops.businessmodels.relationships.types.UserShopRelationshipType;
import mamshops.businessmodels.tools.UserMethodAccess;
import mamshops.main.getters.ContainerGetter;
import mamshops.main.getters.CountryGetter;
import mamshops.main.getters.ShopGetter;
import mamshops.requests.getset.AbstractGetter;

public class UserShopGetter extends AbstractGetter{	
	private UserGetter _userGetter;
	private ShopGetter _shopGetter;
	
	public UserShopGetter() {
		super(UserMethodAccess.user,NodeLabel.usershop,null,null);
	}	
	
	public ShopGetter getShop()
	{
		if(_shopGetter==null || !_shopGetter.exists())
			_shopGetter=getRelatedNode(ShopGetter.class, ShopRelationshipType.usershop);
		return _shopGetter;
	}
	
	public UserGetter getUser()
	{
		if(_userGetter==null || !_userGetter.exists())
			_userGetter=getRelatedNode(UserGetter.class, UserRelationshipType.usershop);
		return _userGetter;
	}
	
	public List<CountryGetter> getDeliveringCountries()
	{
		return getRelatedNodes(CountryGetter.class, UserShopRelationshipType.deliveringcountry);
	}	
	
	public List<CountryGetter> getAvailableDeliveringCountries()
	{
		return getUser().getDeliveringCountries();
	}
	
	public ContainerGetter getContainer()
	{
		return getRelatedNode(ContainerGetter.class, UserShopRelationshipType.category);
	}
	
	@Override
	public void initialize(HttpServletRequest request){
		super.initialize(request);
		if(_currentNode!=null)
			return;
		_userGetter=construct(UserGetter.class);
		_shopGetter=construct(ShopGetter.class);
		if(_userGetter.exists() && _shopGetter.exists())
		{
			List<MamsNode> listNodes=_userGetter.getNode().getNodes(_shopGetter.getNode(),true,UserRelationshipType.usershop,ShopRelationshipType.usershop);
			if(!listNodes.isEmpty())
				_currentNode=listNodes.get(0);
		}
	}	

	public boolean isValidated()
	{
		return getAttribute(UserShopPropertyKey.validated,false).equals("true");
	}
}
